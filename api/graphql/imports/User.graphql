type Role {
    id: ID!
    name: String!
    guard_name: String!
    permissions: [Permission!]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

type Permission {
    id: ID!
    name: String!
    guard_name: String!
    created_at: DateTime!
    updated_at: DateTime!
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Unique email address."
    email: String!

    "Roles assigned."
    roles: [Role!]! @hasMany

    "Permissions *directly* assigned."
    permissions: [Permission!]! @hasMany

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

extend type Query {
    "Find a single user by an identifying attribute."
    user(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
        "Filters by email. Accepts SQL LIKE wildcards `%` and `_`."
        email: String @where(operator: "like")
    ): [User!]! @all
}